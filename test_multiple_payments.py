#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import sqlite3
import os
import json

DB_PATH = "hosting.db"

def test_multiple_payments_per_user():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n")
    
    if not os.path.exists(DB_PATH):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        conn = sqlite3.connect(DB_PATH, timeout=30)
        c = conn.cursor()
        
        # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏
        c.execute("""
            SELECT vk_id, COUNT(*) as count, GROUP_CONCAT(original_filename) as files
            FROM vedomosti_users 
            WHERE state LIKE 'imported:%'
            GROUP BY vk_id
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        """)
        
        multi_users = c.fetchall()
        
        print("1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –í–ï–î–û–ú–û–°–¢–Ø–ú–ò:")
        print("="*60)
        
        if not multi_users:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            c.execute("""
                SELECT vk_id, COUNT(*) as count, GROUP_CONCAT(original_filename) as files
                FROM vedomosti_users 
                WHERE state LIKE 'imported:%'
                GROUP BY vk_id
                ORDER BY count DESC
            """)
            all_users = c.fetchall()
            
            print("\n–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ë–î:")
            for vk_id, count, files in all_users:
                print(f"  VK ID {vk_id}: {count} –≤–µ–¥–æ–º–æ—Å—Ç–µ–π ({files})")
            
            conn.close()
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏
        for vk_id, count, files in multi_users[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 3
            print(f"VK ID: {vk_id}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π: {count}")
            print(f"–§–∞–π–ª—ã: {files}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏
            c.execute("""
                SELECT id, original_filename, state, status, created_at
                FROM vedomosti_users 
                WHERE vk_id = ? AND state LIKE 'imported:%'
                ORDER BY created_at DESC
            """, (vk_id,))
            
            user_payments = c.fetchall()
            
            print("  –î–µ—Ç–∞–ª–∏ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π:")
            for i, (db_id, filename, state, status, created_at) in enumerate(user_payments, 1):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ state
                payment_id = state.split(':', 1)[1] if ':' in state else 'unknown'
                print(f"    {i}. {filename}")
                print(f"       Payment ID: {payment_id[:8]}...")
                print(f"       Status: {status or 'new'}")
                print(f"       DB ID: {db_id}")
                print(f"       Created: {created_at}")
            print()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å payment_id
        print("2. –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò PAYMENT_ID:")
        print("="*60)
        
        c.execute("""
            SELECT state, COUNT(*) as count
            FROM vedomosti_users 
            WHERE state LIKE 'imported:%'
            GROUP BY state
            HAVING COUNT(*) > 1
        """)
        
        duplicate_states = c.fetchall()
        
        if duplicate_states:
            print("‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø PAYMENT_ID:")
            for state, count in duplicate_states:
                payment_id = state.split(':', 1)[1] if ':' in state else state
                print(f"  Payment ID {payment_id[:8]}... –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {count} —Ä–∞–∑")
        else:
            print("‚úÖ –í—Å–µ payment_id —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        print("\n3. –¢–ï–°–¢ –õ–û–ì–ò–ö–ò GET_ALL_PAYMENTS_FOR_USER_FROM_DB:")
        print("="*60)
        
        if multi_users:
            test_user_id = multi_users[0][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            c.execute("""
                SELECT id, vk_id, personal_path, original_filename, state, status, disagree_reason, confirmed_at, created_at 
                FROM vedomosti_users 
                WHERE vk_id = ? AND state LIKE 'imported:%'
                ORDER BY created_at DESC, id DESC
                LIMIT 100
            """, (str(test_user_id),))
            
            rows = c.fetchall()
            
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id}:")
            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {len(rows)}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ù–û–í–£–Æ –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏
            payments = []
            
            for db_row in rows:
                db_id, vk_id_raw, personal_path, original_filename, state, status_db, disagree_reason_db, confirmed_at_db, created_at_db = db_row
                
                if not state or not state.startswith('imported:'):
                    continue
                
                parts = state.split(':', 1)
                if len(parts) != 2 or not parts[1]:
                    continue
                
                payment_id = parts[1]
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payment_id –Ω–∞ –æ—Å–Ω–æ–≤–µ db_id
                unique_payment_id = f"{payment_id}_{db_id}" if payment_id else f"payment_{db_id}"
                
                payments.append({
                    "id": unique_payment_id,
                    "filename": original_filename,
                    "status": status_db or "new", 
                    "created_at": created_at_db,
                    "db_id": db_id,
                    "original_payment_id": payment_id
                })
            
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(payments)}")
            print("–°–ø–∏—Å–æ–∫ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π:")
            for i, p in enumerate(payments, 1):
                print(f"  {i}. {p['filename']} - {p['status']} ({p['id'][:8]}...)")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_multiple_payments_per_user()
    print(f"\nüìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print(f"1. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è payment_id –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
    print(f"2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏")
    print(f"3. –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏")
    print(f"4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç–∏ vs –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
    print(f"\nüîç –ü–†–û–í–ï–†–¨–¢–ï –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã")